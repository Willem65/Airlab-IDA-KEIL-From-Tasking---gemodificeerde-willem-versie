C51 COMPILER V9.60.0.0   RS232                                                             08/24/2022 00:26:28 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE RS232
OBJECT MODULE PLACED IN .\Objects\RS232.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE RS232.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\RS232.lst) TABS(2) OBJECT(.\Objects\RS232.obj)

line level    source

   1          #include "reg552.h"
   2          //#include "Delay.h"
   3          //#include "LCD.h"
   4          #include "airlabbrm-willem.h"
   5          #include "RS232.h"
   6          #include "I2C.h"
   7          #include "ConsoleTimer.h"
   8          
   9          //char IDString[30]= "D&R Airlab v2.04 - 08/2006";
  10          
  11          void DoSerial()
  12          {
  13   1        unsigned char Event = SerialBufferIn[SerialBufferInPtrBottom++];
  14   1        unsigned char Channel = SerialBufferIn[SerialBufferInPtrBottom++];
  15   1        unsigned char Data = SerialBufferIn[SerialBufferInPtrBottom++];
  16   1      
  17   1        switch (Event)
  18   1        {
  19   2          case SERIAL_ON:
  20   2          {
  21   3            EventBuffer[EventBufferPtrTop++] = (unsigned int)ON | (Channel<<3);
  22   3          }
  23   2          break;
  24   2          case SERIAL_CUE:
  25   2          {
  26   3            EventBuffer[EventBufferPtrTop++] = (unsigned int)PFL | (Channel<<3);
  27   3          }
  28   2          break;
  29   2          case TIMER_START:
  30   2          {
  31   3            GlobalTimerActive = 1;
  32   3          }
  33   2          break;
  34   2          case TIMER_STOP:
  35   2          {
  36   3            GlobalTimerActive = 0;
  37   3          }
  38   2          break;
  39   2          case TIMER_RESET:
  40   2          {
  41   3            TimeAndDate.Hours = 0;
  42   3            TimeAndDate.Minutes = 0;
  43   3            TimeAndDate.Seconds = 0;
  44   3            TimeAndDate.Frames = 0;
  45   3          }
  46   2          break;
  47   2          case SERIAL_MODULESETUPDATA:
  48   2          {
  49   3            unsigned char cntByte;
  50   3            ConsoleModuleSettings[Channel][0] = Data;
  51   3            for (cntByte=1; cntByte<29; cntByte++)
  52   3            {
  53   4              ConsoleModuleSettings[Channel][cntByte] = SerialBufferIn[SerialBufferInPtrBottom++];
  54   4            }
C51 COMPILER V9.60.0.0   RS232                                                             08/24/2022 00:26:28 PAGE 2   

  55   3          }
  56   2          break;
  57   2          case SERIAL_MASTERSETUPDATA:
  58   2          {
  59   3            unsigned char cntByte;
  60   3            ConsoleMasterSettings[0] = Data;
  61   3            for (cntByte=1; cntByte<5; cntByte++)
  62   3            {
  63   4              ConsoleMasterSettings[cntByte] = SerialBufferIn[SerialBufferInPtrBottom++];
  64   4            }
  65   3          }
  66   2          break;
  67   2          case GETSERIAL_IDSTRING:
  68   2          {
  69   3            unsigned char cntByte;
  70   3            SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_IDSTRING;
  71   3            SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
  72   3            for (cntByte=0; cntByte<30; cntByte++)
  73   3            {
  74   4              SerialBufferOut[SerialBufferOutPtrTop++] = IDString[cntByte]&0x7F;
  75   4            }
  76   3          }
  77   2          break;
  78   2          case GETSERIAL_MODULESETUPDATA:
  79   2          {
  80   3            unsigned char cntByte;
  81   3      
  82   3            SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
  83   3            SerialBufferOut[SerialBufferOutPtrTop++] = Channel;
  84   3            for (cntByte=0; cntByte<29; cntByte++)
  85   3            {
  86   4              SerialBufferOut[SerialBufferOutPtrTop++] =
  87   4              ConsoleModuleSettings[Channel][cntByte]&0x7F;
  88   4            }
  89   3          }
  90   2          break;
  91   2          case GETSERIAL_MASTERSETUPDATA:
  92   2          {
  93   3            unsigned char cntByte;
  94   3      
  95   3            SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
  96   3            SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
  97   3            for (cntByte=0; cntByte<5; cntByte++)
  98   3            {
  99   4              SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
 100   4            }
 101   3          }
 102   2          break;
 103   2          case GETSERIAL_CONFIG:
 104   2          {
 105   3            unsigned char cntByte;
 106   3      
 107   3            SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_CONFIG;
 108   3            SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
 109   3            for (cntByte=0; cntByte<16; cntByte++)
 110   3            {
 111   4              SerialBufferOut[SerialBufferOutPtrTop++] = ModuleType[cntByte]&0x7F;
 112   4            }
 113   3          }
 114   2          break;
 115   2          case STORE_EEPROM:
 116   2          {
C51 COMPILER V9.60.0.0   RS232                                                             08/24/2022 00:26:28 PAGE 3   

 117   3            unsigned char cntModule;
 118   3            unsigned int Address = 0x0000;
 119   3            WriteData(I2CAddressEEProm, Address, ModuleType, NROFMODULES);
 120   3            Address += NROFMODULES;
 121   3            for (cntModule=0; cntModule<NROFMODULES; cntModule++)
 122   3            {
 123   4              WriteData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
 124   4              Address += 29;
 125   4            }
 126   3            WriteData(I2CAddressEEProm, Address, ConsoleMasterSettings, 5);
 127   3          }
 128   2          break;
 129   2          case STORE_SMARTCARD:
 130   2          {
 131   3            if (CardInserted)
 132   3            {
 133   4              unsigned char cntModule;
 134   4              unsigned int Address = 0x0000;
 135   4              WriteData(I2CAddressSmartCard, Address, ModuleType, NROFMODULES);
 136   4              Address += NROFMODULES;
 137   4              for (cntModule=0; cntModule<NROFMODULES; cntModule++)
 138   4              {
 139   5                WriteData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
 140   5                Address += 29;
 141   5              }
 142   4              WriteData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);
 143   4            }
 144   3          }
 145   2          break;
 146   2          case GETCARD_INSERTED:
 147   2          {    
 148   3            SerialBufferOut[SerialBufferOutPtrTop++] = CARD_INSERTED;
 149   3            SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
 150   3      //      SerialBufferOut[SerialBufferOutPtrTop++] = CardInserted;
 151   3          }
 152   2          break;
 153   2          case FROMDIRECTOR_TELCO_ON_CONNECT:
 154   2          {
 155   3            if (Data)
 156   3            {
 157   4              char ModuleNr;
 158   4            
 159   4              ModuleNr = GetModuleNrFromTelcoNr(Channel);
 160   4      
 161   4              if (ModuleNr != -1)
 162   4              {
 163   5                EventBuffer[EventBufferPtrTop++] = (ModuleNr<<3) | ON;
 164   5              }
 165   4            }
 166   3          }
 167   2          break;
 168   2          case FROMDIRECTOR_TELCO_MUTE:
 169   2          {
 170   3            char ModuleNr;
 171   3            
 172   3            ModuleNr = GetModuleNrFromTelcoNr(Channel);
 173   3      
 174   3            if (ModuleNr != -1)
 175   3            {
 176   4              if (Data)
 177   4              {
 178   5                EventBuffer[EventBufferPtrTop++] = (unsigned int)(ModuleNr<<3) | EXT_MUTE;
C51 COMPILER V9.60.0.0   RS232                                                             08/24/2022 00:26:28 PAGE 4   

 179   5              }
 180   4              else
 181   4              {
 182   5                EventBuffer[EventBufferPtrTop++] = (unsigned int)(ModuleNr<<3) | EXT_MUTE | 0x100;
 183   5              }
 184   4            }
 185   3          }
 186   2      //    break;
 187   2      //    case FROMDIRECTOR_TELCO_TB:
 188   2      //    {
 189   2      //      if (Data)
 190   2      //      {
 191   2      //        char ModuleNr;
 192   2      //      
 193   2      //        ModuleNr = GetModuleNrFromTelcoNr(Channel);
 194   2      //  
 195   2      //        if (ModuleNr != -1)
 196   2      //        {
 197   2      //          EventBuffer[EventBufferPtrTop++] = (ModuleNr<<3) | PFL;
 198   2      //        }
 199   2      //      }
 200   2      //    }
 201   2      //    break;
 202   2      //    case FROMDIRECTOR_TB:
 203   2      //    {
 204   2      //      if (Channel == TB_CONSOLE)
 205   2      //      {
 206   2      //        if (Data)
 207   2      //        {
 208   2      //          DirectorTBCUEBussActive = 1;
 209   2      //        }
 210   2      //        else
 211   2      //        {
 212   2      //          DirectorTBCUEBussActive = 0;
 213   2      //        }
 214   2      //      }
 215   2      //      else if (Channel == TB_ALL)
 216   2      //      {
 217   2      //        if (Data)
 218   2      //        {
 219   2      //          DirectorTBCUEBussActive = 1;
 220   2      //        }
 221   2      //        else
 222   2      //        {
 223   2      //          DirectorTBCUEBussActive = 0;
 224   2      //        }
 225   2      //      }
 226   2      //      CueControl();
 227   2      //    }
 228   2      //    break;
 229   2        }
 230   1      }
 231          
 232          
 233          void SetupSIO0()
 234          {
 235   1        // initialise serial port                              
 236   1        // timer 1 in mode 2, do not touch timer 0 settings    
 237   1        PCON = PCON | 0x80;         // SMOD = 1 
 238   1        TMOD = (TMOD & 0x0F) | 0x20;    // timer1 mode 2,gate = 0 
 239   1        // reload value for 19.2 kbaud (processor at 11.059 Mhz) is 0xFD 
 240   1      
C51 COMPILER V9.60.0.0   RS232                                                             08/24/2022 00:26:28 PAGE 5   

 241   1        TH1 = 0xFF;
 242   1        // 8 bits, 1 start, 1 stop, receive enabled             
 243   1        // when receive should be disabled, fill SCON           
 244   1        // with '0x60'                                          
 245   1        S0CON = 0x70;
 246   1        // start timer 1                                        
 247   1        TR1 = 1;
 248   1      
 249   1        TI  = 0;    // reset transmit, receive flags        
 250   1        RI  = 0;    // reset recieve interrupt              
 251   1        ES0 = 1;    // enable interrupt                     
 252   1        PS0 = 0;
 253   1      }
 254          
 255          
 256          
 257          
 258          void SIO0(void) interrupt 4 using 2 
 259          {
 260   1        if(RI)
 261   1        {
 262   2          SerialByte = S0BUF;
 263   2          RI = 0;         /*  reset receive flag */
 264   2      
 265   2          if (SerialByte&0x80)
 266   2          {
 267   3            SerialCnt = 0;
 268   3            switch (SerialByte)
 269   3            {
 270   4              case SERIAL_MODULESETUPDATA:
 271   4              {
 272   5                SerialLength = 31;
 273   5              }
 274   4              break;
 275   4              case SERIAL_MASTERSETUPDATA:
 276   4              {
 277   5                SerialLength = 7;
 278   5              }
 279   4              break;
 280   4              default:
 281   4              {
 282   5                SerialLength = 3;
 283   5              }
 284   4              break;
 285   4            }
 286   3          }
 287   2      
 288   2          DummySerialBuffer[SerialCnt++] = SerialByte;
 289   2          if (SerialCnt >= SerialLength)
 290   2          {
 291   3            unsigned char cnt;
 292   3            for (cnt=0; cnt<SerialLength; cnt++)
 293   3            {
 294   4              SerialBufferIn[SerialBufferInPtrTop++] = DummySerialBuffer[cnt];
 295   4            }
 296   3          }
 297   2        }
 298   1      
 299   1        if(TI)
 300   1        {
 301   2          //SerialBufferOutPtrBottom=0x2B;
 302   2      //    S0BUF = (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80));
C51 COMPILER V9.60.0.0   RS232                                                             08/24/2022 00:26:28 PAGE 6   

 303   2      //    S0BUF = SerialBufferOutPtrTop;
 304   2      //    S0BUF = SerialBufferOutPtrBottom;
 305   2          
 306   2          
 307   2          //if (SerialBufferOutPtrBottom != SerialBufferOutPtrTop)
 308   2          
 309   2          if ((SerialBufferOutPtrBottom != SerialBufferOutPtrTop) &&  (!(SerialBufferOut[SerialBufferOutPtrBottom]
             -&0x80)))      
 310   2          {
 311   3            S0BUF = SerialBufferOut[SerialBufferOutPtrBottom++];
 312   3          }
 313   2          else
 314   2          {
 315   3            SendSerialReady = 1;
 316   3          }
 317   2          TI = 0;
 318   2        }
 319   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1520    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
